"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = __importDefault(require("../../api"));
function timeout(requests) {
    let timer = 100;
    if (requests >= 30) {
        timer = 30000;
    }
    return new Promise(resolve => setTimeout(resolve, timer));
}
function animesByGenre(id, type, limit) {
    return __awaiter(this, void 0, void 0, function* () {
        let page = 1;
        let requests = 0;
        const dataObject = {};
        while (dataObject.anime.length !== limit) {
            yield timeout(requests);
            const { data } = yield api_1.default.get(`/genre/anime/${id}/${page}`);
            for (let i = 0; i < limit; i += 1) {
                if (data.anime[i].type === type)
                    dataObject.anime.push(data.anime[i]);
            }
            page += 1;
            requests += 1;
            if (requests === 30)
                requests = 0;
        }
        return dataObject;
    });
}
exports.default = animesByGenre;
